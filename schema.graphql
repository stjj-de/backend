# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Church {
  id: ID!
  name: String
  location: String
  description: String
  image: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ChurchWhereUniqueInput {
  id: ID
}

input ChurchWhereInput {
  AND: [ChurchWhereInput!]
  OR: [ChurchWhereInput!]
  NOT: [ChurchWhereInput!]
  id: IDFilter
  name: StringFilter
  location: StringFilter
  description: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ChurchOrderByInput {
  id: OrderDirection
  name: OrderDirection
  location: OrderDirection
  description: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ChurchUpdateInput {
  name: String
  location: String
  description: String
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ChurchUpdateArgs {
  where: ChurchWhereUniqueInput!
  data: ChurchUpdateInput!
}

input ChurchCreateInput {
  name: String
  location: String
  description: String
  image: ImageFieldInput
}

type ChurchServiceDate {
  id: ID!
  shortDescription: String
  longDescription: String
  date: DateTime
  livestreamPlanned: Boolean
  church: Church
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ChurchServiceDateWhereUniqueInput {
  id: ID
}

input ChurchServiceDateWhereInput {
  AND: [ChurchServiceDateWhereInput!]
  OR: [ChurchServiceDateWhereInput!]
  NOT: [ChurchServiceDateWhereInput!]
  id: IDFilter
  shortDescription: StringFilter
  longDescription: StringFilter
  date: DateTimeFilter
  livestreamPlanned: BooleanFilter
  church: ChurchWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input ChurchServiceDateOrderByInput {
  id: OrderDirection
  shortDescription: OrderDirection
  longDescription: OrderDirection
  date: OrderDirection
  livestreamPlanned: OrderDirection
}

input ChurchServiceDateUpdateInput {
  shortDescription: String
  longDescription: String
  date: DateTime
  livestreamPlanned: Boolean
  church: ChurchRelateToOneForUpdateInput
}

input ChurchRelateToOneForUpdateInput {
  create: ChurchCreateInput
  connect: ChurchWhereUniqueInput
  disconnect: Boolean
}

input ChurchServiceDateUpdateArgs {
  where: ChurchServiceDateWhereUniqueInput!
  data: ChurchServiceDateUpdateInput!
}

input ChurchServiceDateCreateInput {
  shortDescription: String
  longDescription: String
  date: DateTime
  livestreamPlanned: Boolean
  church: ChurchRelateToOneForCreateInput
}

input ChurchRelateToOneForCreateInput {
  create: ChurchCreateInput
  connect: ChurchWhereUniqueInput
}

type CustomPage {
  id: ID!
  title: String
  slug: String
  content: String
}

input CustomPageWhereUniqueInput {
  id: ID
  slug: String
}

input CustomPageWhereInput {
  AND: [CustomPageWhereInput!]
  OR: [CustomPageWhereInput!]
  NOT: [CustomPageWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  content: StringFilter
}

input CustomPageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  content: OrderDirection
}

input CustomPageUpdateInput {
  title: String
  slug: String
  content: String
}

input CustomPageUpdateArgs {
  where: CustomPageWhereUniqueInput!
  data: CustomPageUpdateInput!
}

input CustomPageCreateInput {
  title: String
  slug: String
  content: String
}

type Link {
  id: ID!
  url: String
  text: String
  emoji: String
  priority: Int
}

input LinkWhereUniqueInput {
  id: ID
}

input LinkWhereInput {
  AND: [LinkWhereInput!]
  OR: [LinkWhereInput!]
  NOT: [LinkWhereInput!]
  id: IDFilter
  url: StringFilter
  text: StringFilter
  emoji: StringFilter
  priority: IntFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input LinkOrderByInput {
  id: OrderDirection
  url: OrderDirection
  text: OrderDirection
  emoji: OrderDirection
  priority: OrderDirection
}

input LinkUpdateInput {
  url: String
  text: String
  emoji: String
  priority: Int
}

input LinkUpdateArgs {
  where: LinkWhereUniqueInput!
  data: LinkUpdateInput!
}

input LinkCreateInput {
  url: String
  text: String
  emoji: String
  priority: Int
}

type Person {
  id: ID!
  displayName: String
  priority: Int
  image: ImageFieldOutput
  role: String
  telephoneNumber: String
  emailAddress: String
}

input PersonWhereUniqueInput {
  id: ID
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: IDFilter
  displayName: StringFilter
  role: StringFilter
  telephoneNumber: StringFilter
  emailAddress: StringFilter
}

input PersonOrderByInput {
  id: OrderDirection
  displayName: OrderDirection
  priority: OrderDirection
  role: OrderDirection
  telephoneNumber: OrderDirection
  emailAddress: OrderDirection
}

input PersonUpdateInput {
  displayName: String
  priority: Int
  image: ImageFieldInput
  role: String
  telephoneNumber: String
  emailAddress: String
}

input PersonUpdateArgs {
  where: PersonWhereUniqueInput!
  data: PersonUpdateInput!
}

input PersonCreateInput {
  displayName: String
  priority: Int
  image: ImageFieldInput
  role: String
  telephoneNumber: String
  emailAddress: String
}

type Picture {
  id: ID!
  file: ImageFieldOutput
  altText: String
}

input PictureWhereUniqueInput {
  id: ID
}

input PictureWhereInput {
  AND: [PictureWhereInput!]
  OR: [PictureWhereInput!]
  NOT: [PictureWhereInput!]
  id: IDFilter
  altText: StringFilter
}

input PictureOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input PictureUpdateInput {
  file: ImageFieldInput
  altText: String
}

input PictureUpdateArgs {
  where: PictureWhereUniqueInput!
  data: PictureUpdateInput!
}

input PictureCreateInput {
  file: ImageFieldInput
  altText: String
}

type Post {
  id: ID!
  title: String
  publicationDate: DateTime
  slug: String
  authors(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0): [Person!]
  authorsCount(where: PersonWhereInput! = {}): Int
  featured: Boolean
  content: String
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  publicationDate: DateTimeNullableFilter
  slug: StringFilter
  authors: PersonManyRelationFilter
  featured: BooleanFilter
  content: StringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PersonManyRelationFilter {
  every: PersonWhereInput
  some: PersonWhereInput
  none: PersonWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  publicationDate: OrderDirection
  slug: OrderDirection
  featured: OrderDirection
  content: OrderDirection
}

input PostUpdateInput {
  title: String
  publicationDate: DateTime
  slug: String
  authors: PersonRelateToManyForUpdateInput
  featured: Boolean
  content: String
}

input PersonRelateToManyForUpdateInput {
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  create: [PersonCreateInput!]
  connect: [PersonWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  publicationDate: DateTime
  slug: String
  authors: PersonRelateToManyForCreateInput
  featured: Boolean
  content: String
}

input PersonRelateToManyForCreateInput {
  create: [PersonCreateInput!]
  connect: [PersonWhereUniqueInput!]
}

type User {
  id: ID!
  username: String
  firstName: String
  password: PasswordState
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  username: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  firstName: StringFilter
  password: PasswordFilter
  isAdmin: BooleanFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  firstName: OrderDirection
  isAdmin: OrderDirection
}

input UserUpdateInput {
  username: String
  firstName: String
  password: String
  isAdmin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  firstName: String
  password: String
  isAdmin: Boolean
}

type Video {
  id: ID!
  title: String
  youtubeVideoId: String
  publicationDate: DateTime
  description: JSON
}

input VideoWhereUniqueInput {
  id: ID
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  title: StringFilter
  publicationDate: DateTimeFilter
}

input VideoOrderByInput {
  id: OrderDirection
  title: OrderDirection
  publicationDate: OrderDirection
}

input VideoUpdateInput {
  title: String
  youtubeVideoId: String
  publicationDate: DateTime
  description: JSON
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  title: String
  youtubeVideoId: String
  publicationDate: DateTime
  description: JSON
}

type Settings {
  id: ID!
  livestreamVideoId: String
  parishBulletin: FileFieldOutput
  acolyteSchedule: FileFieldOutput
  pastors(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0): [Person!]
  pastorsCount(where: PersonWhereInput! = {}): Int
  homePageLinks(where: LinkWhereInput! = {}, orderBy: [LinkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Link!]
  homePageLinksCount(where: LinkWhereInput! = {}): Int
  footerLinks(where: LinkWhereInput! = {}, orderBy: [LinkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Link!]
  footerLinksCount(where: LinkWhereInput! = {}): Int
  officeSectionContent: String
  mediaLibraryPageContent: String
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input SettingsWhereUniqueInput {
  id: ID
}

input SettingsWhereInput {
  AND: [SettingsWhereInput!]
  OR: [SettingsWhereInput!]
  NOT: [SettingsWhereInput!]
  id: IDFilter
  livestreamVideoId: StringFilter
  pastors: PersonManyRelationFilter
  homePageLinks: LinkManyRelationFilter
  footerLinks: LinkManyRelationFilter
  officeSectionContent: StringFilter
  mediaLibraryPageContent: StringFilter
}

input LinkManyRelationFilter {
  every: LinkWhereInput
  some: LinkWhereInput
  none: LinkWhereInput
}

input SettingsOrderByInput {
  id: OrderDirection
  livestreamVideoId: OrderDirection
  officeSectionContent: OrderDirection
  mediaLibraryPageContent: OrderDirection
}

input SettingsUpdateInput {
  livestreamVideoId: String
  parishBulletin: FileFieldInput
  acolyteSchedule: FileFieldInput
  pastors: PersonRelateToManyForUpdateInput
  homePageLinks: LinkRelateToManyForUpdateInput
  footerLinks: LinkRelateToManyForUpdateInput
  officeSectionContent: String
  mediaLibraryPageContent: String
}

input FileFieldInput {
  upload: Upload!
}

input LinkRelateToManyForUpdateInput {
  disconnect: [LinkWhereUniqueInput!]
  set: [LinkWhereUniqueInput!]
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

input SettingsUpdateArgs {
  where: SettingsWhereUniqueInput! = {id: 1}
  data: SettingsUpdateInput!
}

input SettingsCreateInput {
  livestreamVideoId: String
  parishBulletin: FileFieldInput
  acolyteSchedule: FileFieldInput
  pastors: PersonRelateToManyForCreateInput
  homePageLinks: LinkRelateToManyForCreateInput
  footerLinks: LinkRelateToManyForCreateInput
  officeSectionContent: String
  mediaLibraryPageContent: String
}

input LinkRelateToManyForCreateInput {
  create: [LinkCreateInput!]
  connect: [LinkWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createChurch(data: ChurchCreateInput!): Church
  createChurches(data: [ChurchCreateInput!]!): [Church]
  updateChurch(where: ChurchWhereUniqueInput!, data: ChurchUpdateInput!): Church
  updateChurches(data: [ChurchUpdateArgs!]!): [Church]
  deleteChurch(where: ChurchWhereUniqueInput!): Church
  deleteChurches(where: [ChurchWhereUniqueInput!]!): [Church]
  createChurchServiceDate(data: ChurchServiceDateCreateInput!): ChurchServiceDate
  createChurchServiceDates(data: [ChurchServiceDateCreateInput!]!): [ChurchServiceDate]
  updateChurchServiceDate(where: ChurchServiceDateWhereUniqueInput!, data: ChurchServiceDateUpdateInput!): ChurchServiceDate
  updateChurchServiceDates(data: [ChurchServiceDateUpdateArgs!]!): [ChurchServiceDate]
  deleteChurchServiceDate(where: ChurchServiceDateWhereUniqueInput!): ChurchServiceDate
  deleteChurchServiceDates(where: [ChurchServiceDateWhereUniqueInput!]!): [ChurchServiceDate]
  createCustomPage(data: CustomPageCreateInput!): CustomPage
  createCustomPages(data: [CustomPageCreateInput!]!): [CustomPage]
  updateCustomPage(where: CustomPageWhereUniqueInput!, data: CustomPageUpdateInput!): CustomPage
  updateCustomPages(data: [CustomPageUpdateArgs!]!): [CustomPage]
  deleteCustomPage(where: CustomPageWhereUniqueInput!): CustomPage
  deleteCustomPages(where: [CustomPageWhereUniqueInput!]!): [CustomPage]
  createLink(data: LinkCreateInput!): Link
  createLinks(data: [LinkCreateInput!]!): [Link]
  updateLink(where: LinkWhereUniqueInput!, data: LinkUpdateInput!): Link
  updateLinks(data: [LinkUpdateArgs!]!): [Link]
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteLinks(where: [LinkWhereUniqueInput!]!): [Link]
  createPerson(data: PersonCreateInput!): Person
  createPeople(data: [PersonCreateInput!]!): [Person]
  updatePerson(where: PersonWhereUniqueInput!, data: PersonUpdateInput!): Person
  updatePeople(data: [PersonUpdateArgs!]!): [Person]
  deletePerson(where: PersonWhereUniqueInput!): Person
  deletePeople(where: [PersonWhereUniqueInput!]!): [Person]
  createPicture(data: PictureCreateInput!): Picture
  createPictures(data: [PictureCreateInput!]!): [Picture]
  updatePicture(where: PictureWhereUniqueInput!, data: PictureUpdateInput!): Picture
  updatePictures(data: [PictureUpdateArgs!]!): [Picture]
  deletePicture(where: PictureWhereUniqueInput!): Picture
  deletePictures(where: [PictureWhereUniqueInput!]!): [Picture]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  createSettings(data: SettingsCreateInput!): Settings
  createPluralSettings(data: [SettingsCreateInput!]!): [Settings]
  updateSettings(where: SettingsWhereUniqueInput! = {id: 1}, data: SettingsUpdateInput!): Settings
  updatePluralSettings(data: [SettingsUpdateArgs!]!): [Settings]
  deleteSettings(where: SettingsWhereUniqueInput! = {id: 1}): Settings
  deletePluralSettings(where: [SettingsWhereUniqueInput!]!): [Settings]
  endSession: Boolean!
  authenticateUserWithPassword(username: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  username: String
  firstName: String
  password: String
}

type Query {
  churches(where: ChurchWhereInput! = {}, orderBy: [ChurchOrderByInput!]! = [], take: Int, skip: Int! = 0): [Church!]
  church(where: ChurchWhereUniqueInput!): Church
  churchesCount(where: ChurchWhereInput! = {}): Int
  churchServiceDates(where: ChurchServiceDateWhereInput! = {}, orderBy: [ChurchServiceDateOrderByInput!]! = [], take: Int, skip: Int! = 0): [ChurchServiceDate!]
  churchServiceDate(where: ChurchServiceDateWhereUniqueInput!): ChurchServiceDate
  churchServiceDatesCount(where: ChurchServiceDateWhereInput! = {}): Int
  customPages(where: CustomPageWhereInput! = {}, orderBy: [CustomPageOrderByInput!]! = [], take: Int, skip: Int! = 0): [CustomPage!]
  customPage(where: CustomPageWhereUniqueInput!): CustomPage
  customPagesCount(where: CustomPageWhereInput! = {}): Int
  links(where: LinkWhereInput! = {}, orderBy: [LinkOrderByInput!]! = [], take: Int, skip: Int! = 0): [Link!]
  link(where: LinkWhereUniqueInput!): Link
  linksCount(where: LinkWhereInput! = {}): Int
  people(where: PersonWhereInput! = {}, orderBy: [PersonOrderByInput!]! = [], take: Int, skip: Int! = 0): [Person!]
  person(where: PersonWhereUniqueInput!): Person
  peopleCount(where: PersonWhereInput! = {}): Int
  pictures(where: PictureWhereInput! = {}, orderBy: [PictureOrderByInput!]! = [], take: Int, skip: Int! = 0): [Picture!]
  picture(where: PictureWhereUniqueInput!): Picture
  picturesCount(where: PictureWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  videos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  pluralSettings(where: SettingsWhereInput! = {id: {equals: 1}}, orderBy: [SettingsOrderByInput!]! = [], take: Int, skip: Int! = 0): [Settings!]
  settings(where: SettingsWhereUniqueInput! = {id: 1}): Settings
  pluralSettingsCount(where: SettingsWhereInput! = {id: {equals: 1}}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
